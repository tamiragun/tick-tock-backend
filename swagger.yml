openapi: 3.0.4
info:
  title: Tick-Tock
  description: |-
    This is an API that interacts with the user-facing app of Tick Tock.
  version: 1.0.12
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://jiypepwmdk.eu-west-1.awsapprunner.com/api
    description: Production server
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Add a new user
      description: Create a new user by providing first name, last name, email address, and password.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticate a user with email and password credentials
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clients:
    post:
      tags:
        - Clients
      summary: Create a new client
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreate'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Clients
      summary: Get all clients
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
        '500':
          $ref: '#/components/responses/ServerError'

  /clients/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Client ID
    
    get:
      tags:
        - Clients
      summary: Get a client by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Clients
      summary: Update a client
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdate'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Clients
      summary: Delete a client
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Projects
      summary: Get all projects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/ServerError'

  /projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Project ID

    get:
      tags:
        - Projects
      summary: Get a project by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Projects
      summary: Update a project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Projects
      summary: Delete a project
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions:
    post:
      tags:
        - Sessions
      summary: Create a new session
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Sessions
      summary: Get all sessions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Session ID

    get:
      tags:
        - Sessions
      summary: Get a session by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Sessions
      summary: Update a session
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionUpdate'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Sessions
      summary: Delete a session
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    UserCreate:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          example: 'Timi'
        lastName:
          type: string
          example: 'Gun'
        email:
          type: string
          format: email
          example: 'timigun@test.com'
        password:
          type: string
          format: password
          example: 'tickT0ck#'

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "securePassword123"

    LoginSuccessResponse:
      type: object
      required:
        - success
        - message
        - user
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        user:
          type: object
          properties:
            id:
              type: integer
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            created_at:
              type: string
              format: date-time
        token:
          type: string
          description: JWT token (if JWT_SECRET is configured)

    ClientCreate:
      type: object
      required:
        - company_name
        - user_id
      properties:
        company_name:
          type: string
          example: "Acme Corp"
        user_id:
          type: integer
          example: 1

    ClientUpdate:
      type: object
      required:
        - company_name
      properties:
        company_name:
          type: string
          example: "Acme Corporation"

    Client:
      type: object
      properties:
        client_id:
          type: integer
        company_name:
          type: string
        user_id:
          type: integer
        created_at:
          type: string
          format: date-time

    ClientResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
        clientId:
          type: integer
        client:
          $ref: '#/components/schemas/Client'

    ProjectCreate:
      type: object
      required:
        - project_name
        - rate
        - rate_type
        - client_id
      properties:
        project_name:
          type: string
          example: "Website Redesign"
        rate:
          type: number
          format: float
          example: 75.50
        rate_type:
          type: string
          enum: [hourly, fixed]
          example: "hourly"
        client_id:
          type: integer
          example: 1
        status:
          type: string
          enum: [active, inactive]
          default: "active"

    ProjectUpdate:
      type: object
      properties:
        project_name:
          type: string
        rate:
          type: number
          format: float
        rate_type:
          type: string
          enum: [hourly, fixed]
        status:
          type: string
          enum: [active, inactive]

    Project:
      type: object
      properties:
        project_id:
          type: integer
        project_name:
          type: string
        rate:
          type: number
          format: float
        rate_type:
          type: string
          enum: [hourly, fixed]
        status:
          type: string
          enum: [active, inactive]
        client_id:
          type: integer
        created_at:
          type: string
          format: date-time

    ProjectResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
        projectId:
          type: integer
        project:
          $ref: '#/components/schemas/Project'

    SessionCreate:
      type: object
      required:
        - started_at
        - project_id
      properties:
        started_at:
          type: string
          format: date-time
        ended_at:
          type: string
          format: date-time
        project_id:
          type: integer

    SessionUpdate:
      type: object
      properties:
        started_at:
          type: string
          format: date-time
        ended_at:
          type: string
          format: date-time

    Session:
      type: object
      properties:
        session_id:
          type: integer
        started_at:
          type: string
          format: date-time
        ended_at:
          type: string
          format: date-time
        duration:
          type: integer
          description: Duration in seconds
        project_id:
          type: integer
        project_name:
          type: string
        client_name:
          type: string
        created_at:
          type: string
          format: date-time

    SessionResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
        sessionId:
          type: integer
        session:
          $ref: '#/components/schemas/Session'

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    ErrorResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message here"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Users
    description: User management and authentication
  - name: Clients
    description: Client management operations
  - name: Projects
    description: Project management operations
  - name: Sessions
    description: Time tracking session operations