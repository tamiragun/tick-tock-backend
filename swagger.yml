openapi: 3.0.4
info:
  title: Tick-Tock
  description: |-
    This is an API that interacts with the user-facing app of Tick Tock.
    
    All request and response fields use camelCase naming convention.
    For example:
    - companyName instead of company_name
    - projectId instead of project_id
    - startedAt instead of started_at
  version: 1.0.12
servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://jiypepwmdk.eu-west-1.awsapprunner.com/api
    description: Production server
paths:
  /users/register:
    post:
      tags:
        - Users
      summary: Add a new user
      description: Create a new user by providing first name, last name, email address, and password.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/login:
    post:
      tags:
        - Users
      summary: User login
      description: Authenticate a user with email and password credentials
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clients:
    post:
      tags:
        - Clients
      summary: Create a new client
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreate'
      responses:
        '201':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Clients
      summary: Get all clients
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  clients:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
        '500':
          $ref: '#/components/responses/ServerError'

  /clients/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Client ID
    
    get:
      tags:
        - Clients
      summary: Get a client by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Client details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Clients
      summary: Update a client
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdate'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Clients
      summary: Delete a client
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Client deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /projects:
    post:
      tags:
        - Projects
      summary: Create a new project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreate'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Projects
      summary: Get all projects
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  projects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/ServerError'

  /projects/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Project ID

    get:
      tags:
        - Projects
      summary: Get a project by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Projects
      summary: Update a project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdate'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Projects
      summary: Delete a project
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions:
    post:
      tags:
        - Sessions
      summary: Create a new session
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags:
        - Sessions
      summary: Get all sessions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '500':
          $ref: '#/components/responses/ServerError'

  /sessions/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Session ID

    get:
      tags:
        - Sessions
      summary: Get a session by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags:
        - Sessions
      summary: Update a session
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionUpdate'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags:
        - Sessions
      summary: Delete a session
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Session deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    UserCreate:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          example: 'John'
          description: User's first name
        lastName:
          type: string
          example: 'Doe'
          description: User's last name
        email:
          type: string
          format: email
          example: 'john.doe@example.com'
          description: User's email address
        password:
          type: string
          format: password
          example: 'secureP@ssw0rd'
          description: User's password (min 8 characters)

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
          description: User's email address
        password:
          type: string
          format: password
          example: "secureP@ssw0rd"
          description: User's password

    LoginSuccessResponse:
      type: object
      required:
        - success
        - message
        - user
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login successful"
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            email:
              type: string
              example: "john.doe@example.com"
            firstName:
              type: string
              example: "John"
            lastName:
              type: string
              example: "Doe"
            createdAt:
              type: string
              format: date-time
              example: "2024-03-14T12:00:00Z"
        token:
          type: string
          description: JWT token (if JWT_SECRET is configured)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ClientCreate:
      type: object
      required:
        - companyName
        - userId
      properties:
        companyName:
          type: string
          example: "Acme Corp"
          description: Name of the company
        userId:
          type: integer
          example: 1
          description: ID of the user who owns this client

    ClientUpdate:
      type: object
      required:
        - companyName
      properties:
        companyName:
          type: string
          example: "Acme Corporation"
          description: Updated name of the company

    Client:
      type: object
      properties:
        clientId:
          type: integer
          example: 1
          description: Unique identifier for the client
        companyName:
          type: string
          example: "Acme Corp"
          description: Name of the company
        userId:
          type: integer
          example: 1
          description: ID of the user who owns this client
        createdAt:
          type: string
          format: date-time
          example: "2024-03-14T12:00:00Z"
          description: Timestamp when the client was created

    ClientResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Client operation successful"
        clientId:
          type: integer
          example: 1
        client:
          $ref: '#/components/schemas/Client'

    ProjectCreate:
      type: object
      required:
        - projectName
        - rate
        - rateType
        - clientId
      properties:
        projectName:
          type: string
          example: "Website Redesign"
          description: Name of the project
        rate:
          type: number
          format: float
          example: 75.50
          description: Project rate (per hour or fixed)
        rateType:
          type: string
          enum: [hourly, fixed]
          example: "hourly"
          description: Type of rate (hourly or fixed)
        clientId:
          type: integer
          example: 1
          description: ID of the client this project belongs to
        status:
          type: string
          enum: [active, inactive]
          default: "active"
          description: Project status

    ProjectUpdate:
      type: object
      properties:
        projectName:
          type: string
          description: Updated name of the project
        rate:
          type: number
          format: float
          description: Updated project rate
        rateType:
          type: string
          enum: [hourly, fixed]
          description: Updated rate type
        status:
          type: string
          enum: [active, inactive]
          description: Updated project status

    Project:
      type: object
      properties:
        projectId:
          type: integer
          example: 1
          description: Unique identifier for the project
        projectName:
          type: string
          example: "Website Redesign"
          description: Name of the project
        rate:
          type: number
          format: float
          example: 75.50
          description: Project rate
        rateType:
          type: string
          enum: [hourly, fixed]
          example: "hourly"
          description: Type of rate
        status:
          type: string
          enum: [active, inactive]
          example: "active"
          description: Project status
        clientId:
          type: integer
          example: 1
          description: ID of the client this project belongs to
        createdAt:
          type: string
          format: date-time
          example: "2024-03-14T12:00:00Z"
          description: Timestamp when the project was created

    ProjectResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Project operation successful"
        projectId:
          type: integer
          example: 1
        project:
          $ref: '#/components/schemas/Project'

    SessionCreate:
      type: object
      required:
        - startedAt
        - projectId
      properties:
        startedAt:
          type: string
          format: date-time
          example: "2024-03-14T09:00:00Z"
          description: When the session started
        endedAt:
          type: string
          format: date-time
          example: "2024-03-14T17:00:00Z"
          description: When the session ended (optional)
        projectId:
          type: integer
          example: 1
          description: ID of the project this session belongs to

    SessionUpdate:
      type: object
      properties:
        startedAt:
          type: string
          format: date-time
          description: Updated session start time
        endedAt:
          type: string
          format: date-time
          description: Updated session end time

    Session:
      type: object
      properties:
        sessionId:
          type: integer
          example: 1
          description: Unique identifier for the session
        startedAt:
          type: string
          format: date-time
          example: "2024-03-14T09:00:00Z"
          description: When the session started
        endedAt:
          type: string
          format: date-time
          example: "2024-03-14T17:00:00Z"
          description: When the session ended
        duration:
          type: integer
          example: 28800
          description: Duration in seconds (automatically calculated)
        projectId:
          type: integer
          example: 1
          description: ID of the project this session belongs to
        projectName:
          type: string
          example: "Website Redesign"
          description: Name of the project (included for convenience)
        clientName:
          type: string
          example: "Acme Corp"
          description: Name of the client (included for convenience)
        createdAt:
          type: string
          format: date-time
          example: "2024-03-14T09:00:00Z"
          description: Timestamp when the session was created

    SessionResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Session operation successful"
        sessionId:
          type: integer
          example: 1
        session:
          $ref: '#/components/schemas/Session'

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation successful"

    ErrorResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Enter your JWT token in the format: Bearer <token>'

tags:
  - name: Users
    description: User management and authentication
  - name: Clients
    description: Client management operations
  - name: Projects
    description: Project management operations
  - name: Sessions
    description: Time tracking session operations